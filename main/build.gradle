def config = rootProject.ext.android
def androidBaseLib = rootProject.ext.androidBaseLib
def url = rootProject.ext.url
//def flavor = getCurrentFlavor()
if (config.appIsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
android {
    compileSdk config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        if (config.appIsApplication) {
            applicationId "com.work.theIsle"
        }
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        flavorDimensions dimensions.main
        // dex突破65535的限制
        multiDexEnabled true
        //missingDimensionStrategy "sdk", "$flavor"
        dataBinding {
            enabled = true
        }
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias 'androidWork'
            keyPassword '123456'
            storeFile file('../ww.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            //是否混淆
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //是否移除无用资源
            zipAlignEnabled true
        }
        debug {
            //是否混淆
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //是否移除无用资源
            zipAlignEnabled true
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "androidWork_${defaultConfig.versionName}_${variant.buildType.name}.apk"
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    sourceSets {
        main {
            if (config.appIsApplication) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest/AndroidManifest.xml'
            }
        }
    }
    // 多渠道打包
    productFlavors {
        //开发环境
        PFDev {
            dimension dimensions.main
            missingDimensionStrategy dimensions.applogin, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.baselib, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.httplib, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.supportlib, "PFDev", "PFTest", "PFRelease"
            manifestPlaceholders = [APP_NAME         : "AndroidWork_Dev",
                                    PGYER_API_KEY    : "74ccdc5e3947229728128b6e97f07128",
                                    PGYER_FRONTJS_KEY: "74ccdc5e3947229728128b6e97f07128"
            ]
            buildConfigField "String", "IBASE_URL", url.devUrl
            buildConfigField "boolean", "isDevDebug", "true"
            applicationId "com.work.theIsle"
        }

        //测试环境
        PFTest {
            dimension dimensions.main
            missingDimensionStrategy dimensions.applogin, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.baselib, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.httplib, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.supportlib, "PFDev", "PFTest", "PFRelease"
            manifestPlaceholders = [APP_NAME         : "AndroidWork_Test",
                                    PGYER_API_KEY    : "74ccdc5e3947229728128b6e97f07128",
                                    PGYER_FRONTJS_KEY: "74ccdc5e3947229728128b6e97f07128"]
            buildConfigField "String", "IBASE_URL", url.testUrl
            buildConfigField "boolean", "isTestDebug", "false"
            applicationId "com.work.theIsle"
        }

        //正式环境
        PFRelease {
            dimension dimensions.main
            missingDimensionStrategy dimensions.applogin, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.baselib, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.httplib, "PFDev", "PFTest", "PFRelease"
            missingDimensionStrategy dimensions.supportlib, "PFDev", "PFTest", "PFRelease"
            manifestPlaceholders = [APP_NAME         : "AndroidWork_Release",
                                    PGYER_API_KEY    : "74ccdc5e3947229728128b6e97f07128",
                                    PGYER_FRONTJS_KEY: "74ccdc5e3947229728128b6e97f07128"]
            buildConfigField "String", "IBASE_URL", url.releaseUrl
            buildConfigField "boolean", "isReleaseDebug", "false"
            applicationId "com.work.theIsle"
        }

    }
}


/**
 * 读取配置文件的内容
 * @return
 */
/*def getCurrentFlavor() {
    def flavorProperties = new Properties()

    String rtn = "httplib"
    def conf = new File("curr-flavor.config")//自定义的配置文件
    if (conf.exists()) {
        conf.withReader('UTF-8') { reader ->
            flavorProperties.load(reader)
        }
    }
    rtn = flavorProperties.getProperty('flavor')
    if (rtn != null && rtn.length() > 1)
        rtn = "${Character.toLowerCase(rtn.charAt(0))}${rtn.substring(1)}"
    else rtn = "httplib"
    return rtn
}*/

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.annotation:annotation:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation project(path: ':moduleBase')
    implementation project(path: ':moduleHttp')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation project(path: ':moduleSupport')
    if (config.appIsApplication) {
        implementation project(path: ':moduleLogin')
    }
    api 'com.alibaba:arouter-api:' + androidBaseLib.version_arouter_api
    kapt 'com.alibaba:arouter-compiler:' + androidBaseLib.version_arouter_compiler
    kapt "com.google.dagger:dagger-compiler:2.42"
}