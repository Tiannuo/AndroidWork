import java.util.regex.Matcher
import java.util.regex.Pattern

def config = rootProject.ext.android
def androidBaseLib = rootProject.ext.androidBaseLib
//def flavor = getCurrentFlavor()
def url = rootProject.ext.url
if (config.httpIsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'org.jetbrains.kotlin.android'
android {
    compileSdk config.compileSdkVersion

    defaultConfig {
        if (config.httpIsApplication) {
            applicationId "com.work.httplib"
        }
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        flavorDimensions dimensions.httplib
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // missingDimensionStrategy "sdk", "$flavor"
    }

    /*
         //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            //Proguard
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
    * */
    buildTypes {
        release {
            minifyEnabled false
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "String", "IBASE_URL", url.testUrl
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "String", "IBASE_URL", url.testUrl
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    sourceSets {
        main {
            if (config.appIsApplication) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest/AndroidManifest.xml'
            }
        }
    }

    // 多渠道打包
    productFlavors {
        //开发环境
        PFdev {
            dimension dimensions.httplib
            missingDimensionStrategy dimensions.supportlib, "PFdev", "PFTest", "PFrelease"
            buildConfigField "String", "IBASE_URL", url.devUrl
            buildConfigField "boolean", "isDevDebug", "true"
        }

        //测试环境
        PFTest {
            dimension dimensions.httplib
            missingDimensionStrategy dimensions.supportlib, "PFdev", "PFTest", "PFrelease"
            buildConfigField "String", "IBASE_URL", url.testUrl
            buildConfigField "boolean", "isTestDebug", "false"
        }

        //正式环境
        PFrelease {
            dimension dimensions.httplib
            missingDimensionStrategy dimensions.supportlib, "PFdev", "PFTest", "PFrelease"
            buildConfigField "String", "IBASE_URL", url.releaseUrl
            buildConfigField "boolean", "isReleaseDebug", "false"
        }
    }

    // 多渠道打包
    /* productFlavors {
         //开发环境
         PFdev {
             buildConfigField "String", "IBASE_URL", url.devUrl
             buildConfigField "boolean", "isDevDebug", "true"
         }

         //测试环境
         PFTest {
             buildConfigField "String", "IBASE_URL", url.testUrl
             buildConfigField "boolean", "isTestDebug", "false"
         }

         //正式环境
         PFrelease {
             buildConfigField "String", "IBASE_URL", url.releaseUrl
             buildConfigField "boolean", "isReleaseDebug", "false"
         }
     }*/

    //使用missingDimensionStrategy指定lib module中的两个flavor，"sdk"为lib module中定义的dimension
    //不然，app module将无法sync成功和找到lib module中的类

/*    android.libraryVariants.all { v ->
        //当flavor被切换时（如在Build Variants中切换）
        //重新读取当前被切换的variant并保存到配置文件
        def currName = getCurrentFlavor()
//        println("------111------$currName")
        File conf = new File("curr-flavor.config")
        if (!conf.exists()) {
            conf.createNewFile()
        }
        conf.withWriter('UTF-8') { writer ->
            writer.write("flavor=$currName")
            writer.flush()
            writer.close()
        }
    }*/

}

/*def getCurrentFlavor() {
    Gradle gradle = getGradle()
    //过滤出本module的当前flavor，正则表达式的[httplib]需要根据自己的进行修改
    Pattern pattern = Pattern.compile(":httplib:(assemble|generate)(\\w+)(Release|Debug)")
    String find = ""

    def tsks = gradle.getStartParameter().getTaskRequests()
    tsks.forEach { tsk ->
        tsk.args.forEach { tskName ->
            Matcher matcher = pattern.matcher(tskName.toString())
            if (matcher.find()) {
                //正则表达式中匹配到的第三组:(\\w+)部分
                find = matcher.group(2)
                return find
            }
        }
    }
    return find
}*/

dependencies {
    implementation androidBaseLib.ktx
    implementation androidBaseLib.appcompat
    implementation androidBaseLib.material
    testImplementation androidBaseLib.junit
    androidTestImplementation androidBaseLib.extJunit
    androidTestImplementation androidBaseLib.espresso
    implementation androidBaseLib.constraintlayout
    implementation project(path: ':supportLib')
}